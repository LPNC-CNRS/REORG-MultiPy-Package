# -*- coding: utf-8 -*-
"""
Created on Fri Mar  8 09:55:38 2018

@author: Felix Renard
"""

import sys
import getopt
import os, fnmatch
import csv
from subprocess import call
import glob
import shutil
import nibabel as nib
import numpy as np
import json
import ants


#########

def find_files(directory, pattern):
    for root, dirs, files in os.walk(directory):
        for basename in files:
            if fnmatch.fnmatch(basename, pattern):
                filename = os.path.join(root, basename)
                yield filename


#############test function

def which(program):
    import os
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)
    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file
    return None

#############

try:
    opts, args = getopt.getopt(sys.argv[1:], "hd:Tsa:fAC", ["help","dir=","T1_register","segmentation","fiber","atlas=","Atlas_reg","connectome"])
except getopt.GetoptError as err:
    # Affiche l'aide et quitte le programme
    print(err) # Va afficher l'erreur en anglais
    print('Please see the help.') # Fonction à écrire rappelant la syntaxe de la commande
    sys.exit(2)
 
output = None
verbose = False
for o, a in opts:
    if o == "-v":
        # On place l'option 'verbose' à True
        verbose = True


    elif o in ("-h", "--help"):
        # On affiche l'aide
        print('Help of the DTI prepocessing:')
        print('* means that no parameter is needed \n')
        print('     -h , --help: print the help')
        print('     -d , --dir : Directory of the data (MUST be set)')
        print('     -T , --T1_register : register the anatomic image in the diffusion space')
        print('     -s , --segmentation : Segment the anatomic images in GM/WM')
        print('     -a , --atlas: Define the atlas to perform the connectome analysis')
        print('     -f , --fiber : Keep the fiber generated by mrtrix')
        print('     -A , --Atlas_reg : Register the different templates in the patient space')
        print('     -C , --connectome : Estimate the structural connectome!')
        sys.exit()


    elif o in ("-d", "--dir"):
        #Lecture des fichiers
        cur_dir = a
        print( a )
        if os.path.isdir(cur_dir)==False:
            print("Error")
            print( cur_dir + " is not a directory.")
            sys.exit(-1)


        print( "\n Directory of the raw data:"+ cur_dir +" \n")
        file_name =  cur_dir+"/sub-*/ses-*/"
        name = glob.glob(file_name)
        name.sort()
        dir_name = name
        sub_name = [ x.split('/')[-3] for x in name]
        ses_name =[ x.split('/')[-2] for x in name]
        if len(ses_name)==0:
            print("Error")
            print("No directory are found in " + cur_dir+"/sub-*/ses-*/")
            print("Please check the directory tree.")
            sys.exit(-1)
        
        file_name_der =  cur_dir+"derivatives/sub-*/ses-*/"
        name_der = glob.glob(file_name_der)
        dir_name_der = name_der
        name_der.sort()
        sub_name_der = [ x.split('/')[-3] for x in name_der]
        ses_name_der =[ x.split('/')[-2] for x in name_der]
        if len(ses_name_der)==0:
            print("Error")
            print("No directory are found in " + cur_dir+"derivatives/sub-*/ses-*/")
            print("Please check the directory tree.")
            sys.exit(-1)
        print( sub_name_der )
        print( sub_name )

    elif o in ("-T","-T1_register"):
        print( "register the anatomic image in the diffusion space")

        try:
            name
        except NameError:
            print("Error with directory")
            print("Directory is no set or empty.")
            print("Please specify the -d or --dir parameters.")
            sys.exit(-1)

        if which('fsl5.0-flirt'):
            flirt = 'fsl5.0-flirt'
        elif which('flirt'):
            flirt = 'flirt'
        else:
            print( 'No FSL FLIRT algortihm. Please verify your packages')
            sys.exit(-1)
            
        for i in range(len(name)):
            if os.path.isfile(dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_dwi.mif'):
                ref_file = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_dwi.mif'
            if os.path.isfile(dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_degibbs_dwi.mif'):
                ref_file = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_degibbs_dwi.mif'
            if os.path.isfile(dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_eddy_dwi.mif'):
                ref_file = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_eddy_dwi.mif'
            if os.path.isfile(dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_normalize_dwi.mif'):
                ref_file = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_normalize_dwi.mif'

            try:
                anat_file = dir_name[i]+'anat/'+sub_name[i]+'_'+ses_name[i]+'_T1w.nii.gz'
                tmp_b0_file =dir_name[i] +'dwi/'+sub_name[i]+'_'+ses_name[i]+'_dwi_tmp.nii.gz'
                output_file = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_diffspace_T1.nii.gz'
                omat = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_T12dwi.mat'
                cmd ="dwiextract -force -bzero "+ref_file+ " "+tmp_b0_file
                call(cmd.split())
                cmd ="mrmath "+tmp_b0_file+" mean "+tmp_b0_file+" -axis 3 -force"
                call(cmd.split())
                cmd = flirt+" -dof 6 -in "+anat_file+' -ref '+tmp_b0_file +' -out '+output_file +' -omat '+omat 
                print( cmd)
                print( sub_name[i])
                call(cmd.split())
                os.remove(tmp_b0_file)
            except:
                print( sub_name[i] + ' has a problem!')

    elif o in ("-s","--segmentation"):

        print( "Segment the anatomic images in GM/WM")
        
        try:
            name_der
        except NameError:
            print("Error with directory")
            print("Directory is no set or empty.")
            print("Please specify the -d or --dir parameters.")
            sys.exit(-1)
        
        tmp = glob.glob(cur_dir+'derivatives/*/*/dwi/*_diffspace_T1.nii.gz')
        if len(tmp) == 0:
            print( "Warning!!! No T1 in diffusion space!")
            sys.exit(-1)
            
        for i in range(len(name_der)):
            input_file = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_diffspace_T1.nii.gz'
            output_file = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_T1segmentation.mif.gz'
            cmd = "5ttgen fsl -nthreads 20 "+input_file+" "+output_file
            print( sub_name[i])
            call(cmd.split(' '))
            output_mask = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_maskT1.nii.gz'
            cmd = 'mrmath '+output_file+' sum '+output_mask+' -axis 3 -force'
            call(cmd.split(' '))
            diff = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_dwi.mif'
            cmd = 'mrtransform -template '+diff+' '+output_mask+' '+output_mask+' -force'
            call(cmd.split(' '))
            cmd = "maskfilter "+output_mask+" erode "+output_mask+" -force"
            call(cmd.split(' '))

    elif o in ("-a","--atlas"):
        #Get the atlas name, the atlas file name and the corresponding lables name from json file
        print("Set the atlas name\n") 
        atlas_file = a
        if os.path.isfile(atlas_file)==False:
            print("Error")
            print( atlas_file + " is not a file. Please verify your file.")
            sys.exit(-1)
            
        print( atlas_file)
        try:
            data_json = json.load(open(atlas_file))
        except:
            print( atlas_file + " is not a correct JSON. Please verify your file.")
            sys.exit(-1)
        
        #Test the atlas files
        try:
            atlas = data_json["Atlas"]
        except:
            print( "No Atlas key in the json file. It is mandatory.")
            print( "Please check your json file.")
            sys.exit(-1)
        
        for tmp_atlas in atlas:
            if os.path.isfile(tmp_atlas)==False:
                print("Error")
                print( tmp_atlas + " is not a file. Please verify your file.")
                sys.exit(-1)
        
        
        #Test the labels files
        try:
            labels = data_json["Labels"]
        except:
            print( "No Labels key in the json file. It is mandatory.")
            print( "Please check your json file.")
            sys.exit(-1)
        
        for tmp_labels in labels:
            if os.path.isfile(tmp_labels)==False:
                print("Error")
                print( tmp_labels + " is not a file. Please verify your file.")
                sys.exit(-1)
        
        #Test the name of the atlas
        try:
            name_atlas = data_json["Name"]
        except:
            print( "No Name key in the json file. It is mandatory.")
            print( "Please check your json file.")
            sys.exit(-1)
            
        #check the number of each parameter 
        if not( len(atlas) == len(labels) == len(name_atlas) ):
            print( "Not the same number of atlas, labels and atlas_name in the json file.")
            print("It is mandatory.")
            print( "Please check your json file.")
            sys.exit(-1)
                

    elif o in ("-f","-fiber"):
        print( "Keep the tractography files")
        fiber = 1

    elif o in ("-A","--Atlas_reg"):

        print( "Register the Atlas template in the patient space")
        
        try:
            name_der
        except NameError:
            print("Error with directory")
            print("Directory is no set or empty.")
            print("Please specify the -d or --dir parameters.")
            sys.exit(-1)
            
        
        #Get the atlas and labels image
        try:
            atlas
        except:
            print( "The parameter -a,--atlas must be set for this step")
            
        #Load the atlas and the labels
        atlas_img = []
        labels_img = []
        for tmp_atlas in atlas:
            atlas_img.append( ants.image_read(tmp_atlas) )
        for tmp_labels in labels:
            labels_img.append( ants.image_read(tmp_labels) )
        
        for ind_sub in range(len(dir_name)):
            #Read the T1w for each subject
            T1_name_file = dir_name_der[ind_sub]+'dwi/'+sub_name[ind_sub]+'_'+ses_name[ind_sub]+'_diffspace_T1.nii.gz'
            
            try:
                print( sub_name[ind_sub])
                T1_img = ants.image_read(T1_name_file)
                mask_name_file = dir_name_der[ind_sub]+'dwi/'+sub_name[ind_sub]+'_'+ses_name[ind_sub]+'_maskT1.nii.gz'
                img_mask = ants.image_read(mask_name_file)
                print('test')
                for ind_atlas in range(len(atlas)):
                    print("Atlas for diffusion MRI: "+ atlas[ind_atlas])
                    #Mask the skull
                    ind = np.where(img_mask.numpy() == 0)
                    print(ind)
                    T1_img[ind] = 0
                    #Estimate the transformation between template and subject
                    print('test2')
                    aff = ants.registration( T1_img, atlas_img[ind_atlas], "Affine" )
                    atlas2T1_tx = ants.registration(fixed = T1_img, moving = atlas_img[ind_atlas], initial_transform=aff['fwdtransforms'][0], type_of_transform = 'SyN' )
                    #atlas2T1_tx = ants.registration(fixed = T1_img, moving = atlas_img[ind_atlas], type_of_transform = 'SyN' )
                    #Apply the transformation on the atlas
                    atlas2T1_imgs = ants.apply_transforms(fixed = T1_img, moving= atlas_img[ind_atlas], transformlist=atlas2T1_tx['fwdtransforms'])
                    print('test3')
                    atlas2T1_name = cur_dir+"/derivatives/" +sub_name[ind_sub]+"/"+ses_name[ind_sub]+ "/dwi/"+ sub_name[ind_sub]+"_"+ses_name[ind_sub] +"_"+ name_atlas[ind_atlas]+"_T1.nii.gz"
                    ants.image_write(atlas2T1_imgs, atlas2T1_name)
                    #Apply the transformation on the labels
                    print('test4')
                    labels2T1_imgs = ants.apply_transforms(fixed = T1_img, moving= labels_img[ind_atlas], transformlist=atlas2T1_tx['fwdtransforms'],interpolator='nearestNeighbor')
                    labels2T1_name = cur_dir+"/derivatives/" +sub_name[ind_sub]+"/"+ses_name[ind_sub]+ "/dwi/"+ sub_name[ind_sub]+"_"+ses_name[ind_sub] +"_labels_"+ name_atlas[ind_atlas]+"2T1.nii.gz"
                    index = np.unique(labels2T1_imgs.numpy())
                    index_label = []
                    for ind_label in range(len(index)):
                        index_label.append( np.where(labels2T1_imgs.numpy() == index[ind_label]))
                    
                    for ind_label in range(len(index)):
                        labels2T1_imgs[index_label[ind_label]] = ind_label
                        
                    ants.image_write(labels2T1_imgs, labels2T1_name)
        
            except:
                print( sub_name[ind_sub])
                print("Impossible to create the mask! Check your preprocessing and files" )


    elif o in ("-C","--connectome"):

        print( "Generate the tracks file and the connectome")
        
        try:
            name_der
        except NameError:
            print("Error with directory")
            print("Directory is no set or empty.")
            print("Please specify the -d or --dir parameters.")
            sys.exit(-1)
            
        #Get the atlas and labels image
        try:
            atlas
        except:
            print( "The parameter -a,--atlas must be set for this step")
            
        for i in range(len(name_der)):
            FOD_file = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_wmfod_norm.mif'
            act_file = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_T1segmentation.mif.gz'
            tck_file = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_fiber.tck'
            length_map = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_stat_length_map.mif.gz'
            FOD_map = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_stat_fod_map.mif.gz'
            mu_file = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_mu.txt'
            weight_file = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_weight.csv'  
            try:
                print( sub_name[i])
                cmd = 'tckgen -force -nthreads 20 '+FOD_file+' '+tck_file+' -act '+act_file+' -backtrack -crop_at_gmwmi -maxlength 250 -select 10000000 -seed_dynamic '+FOD_file
                print( cmd)
                call(cmd.split())
                cmd = 'tckmap -force -nthreads 20 '+tck_file+' -vox 2 -contrast length -stat_vox mean -precise '+ length_map
                print( cmd)
                call(cmd.split())
                cmd = 'tckmap -force -nthreads 20 '+tck_file+' -vox 2 -contrast fod_amp -image '+FOD_file+' -stat_vox mean -precise '+FOD_map
                print( cmd)
                call(cmd.split())
                cmd = 'tcksift2 -force -nthreads 20 '+tck_file+' '+FOD_file+' '+weight_file+' -act '+act_file+' -out_mu '+mu_file+' -fd_scale_gm' 
                print( cmd)
                call(cmd.split())
    
                for ind_atlas in range(len(atlas)):
                    parcellation_file = dir_name_der[i]+ "/dwi/"+ sub_name[i]+"_"+ses_name[i] +"_labels_"+ name_atlas[ind_atlas]+"2T1.nii.gz"
                    connectome_map = dir_name_der[i]+'dwi/'+sub_name[i]+'_'+ses_name[i]+'_' + name_atlas[ind_atlas]+ '_connectome.csv'
                    cmd = 'tck2connectome -force -nthreads 20 -tck_weights_in '+weight_file+' -zero_diagonal '+tck_file+' '+parcellation_file+' '+connectome_map
                    print( cmd)
                    print( "\n")
                    call(cmd.split())
            except:
                print( sub_name[i])
                print("Impossible to generate the connectome! Check your preprocessing and files" )
            try:
                fiber
                print("Tck files saved")
            except:
                os.remove(tck_file)
                print("Tck files removed")
    else:
        print("Unknown {} option".format(o))
        sys.exit(2)
